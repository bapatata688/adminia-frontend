{"ast":null,"code":"/**\n * ============================================\n * SERVICIO API - Comunicación con Backend\n * ============================================\n * Centraliza todas las llamadas HTTP al backend\n * Maneja errores y formatos de respuesta\n */\n\nconst API_URL = process.env.REACT_APP_API_URL || 'https://pupuseria-backend.onrender.com/api';\n// Helper para manejar respuestas\nconst handleResponse = async response => {\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.error || 'Error en la petición');\n  }\n  return data;\n};\n\n// Helper para manejar errores\nconst handleError = error => {\n  console.error('API Error:', error);\n  throw error;\n};\n\n// ============================================\n// PRODUCTOS\n// ============================================\nexport const productsAPI = {\n  // Obtener todos los productos\n  getAll: async () => {\n    try {\n      const response = await fetch(`${API_URL}/products`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n  // Obtener un producto por ID\n  getById: async id => {\n    try {\n      const response = await fetch(`${API_URL}/products/${id}`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n  // Crear producto\n  create: async productData => {\n    try {\n      const response = await fetch(`${API_URL}/products`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n  // Actualizar producto\n  update: async (id, productData) => {\n    try {\n      const response = await fetch(`${API_URL}/products/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(productData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n  // Eliminar producto\n  delete: async id => {\n    try {\n      const response = await fetch(`${API_URL}/products/${id}`, {\n        method: 'DELETE'\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  }\n};\n\n// ============================================\n// PEDIDOS\n// ============================================\nexport const ordersAPI = {\n  // Obtener pedidos por fecha\n  getByDate: async date => {\n    try {\n      const response = await fetch(`${API_URL}/orders?date=${date}`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n  // Obtener un pedido por ID\n  getById: async id => {\n    try {\n      const response = await fetch(`${API_URL}/orders/${id}`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n  // Crear pedido\n  create: async orderData => {\n    try {\n      const response = await fetch(`${API_URL}/orders`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(orderData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n  // Actualizar pedido\n  update: async (id, orderData) => {\n    try {\n      const response = await fetch(`${API_URL}/orders/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(orderData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n  // Eliminar pedido\n  delete: async id => {\n    try {\n      const response = await fetch(`${API_URL}/orders/${id}`, {\n        method: 'DELETE'\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  }\n};\n\n// ============================================\n// REPORTES\n// ============================================\nexport const reportsAPI = {\n  // Obtener reporte diario\n  getDaily: async date => {\n    try {\n      const response = await fetch(`${API_URL}/reports/daily/${date}`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n  // Exportar CSV\n  exportCSV: async date => {\n    try {\n      const response = await fetch(`${API_URL}/reports/daily/${date}/export`);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Error al exportar CSV');\n      }\n\n      // Descargar archivo\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `ventas_${date}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n  // Obtener resumen de período\n  getSummary: async (startDate, endDate) => {\n    try {\n      const params = new URLSearchParams();\n      if (startDate) params.append('start_date', startDate);\n      if (endDate) params.append('end_date', endDate);\n      const response = await fetch(`${API_URL}/reports/summary?${params}`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  }\n};\n\n// ============================================\n// DÍAS ABIERTOS\n// ============================================\nexport const openDaysAPI = {\n  // Obtener todos los días\n  getAll: async (startDate, endDate) => {\n    try {\n      const params = new URLSearchParams();\n      if (startDate) params.append('start_date', startDate);\n      if (endDate) params.append('end_date', endDate);\n      const url = `${API_URL}/open-days${params.toString() ? '?' + params : ''}`;\n      const response = await fetch(url);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n  // Obtener estado de un día\n  getByDate: async date => {\n    try {\n      const response = await fetch(`${API_URL}/open-days/${date}`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n  // Actualizar estado de un día\n  update: async (date, isOpen) => {\n    try {\n      const response = await fetch(`${API_URL}/open-days/${date}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          is_open: isOpen\n        })\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n  // Marcar múltiples días\n  updateMultiple: async dates => {\n    try {\n      const response = await fetch(`${API_URL}/open-days`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          dates\n        })\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  }\n};\nexport default {\n  products: productsAPI,\n  orders: ordersAPI,\n  reports: reportsAPI,\n  openDays: openDaysAPI\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","handleResponse","response","data","json","ok","Error","error","handleError","console","productsAPI","getAll","fetch","getById","id","create","productData","method","headers","body","JSON","stringify","update","delete","ordersAPI","getByDate","date","orderData","reportsAPI","getDaily","exportCSV","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","revokeObjectURL","removeChild","success","getSummary","startDate","endDate","params","URLSearchParams","append","openDaysAPI","toString","isOpen","is_open","updateMultiple","dates","products","orders","reports","openDays"],"sources":["/home/fred/adminia-frontend/src/services/api.js"],"sourcesContent":["/**\n * ============================================\n * SERVICIO API - Comunicación con Backend\n * ============================================\n * Centraliza todas las llamadas HTTP al backend\n * Maneja errores y formatos de respuesta\n */\n\nconst API_URL = process.env.REACT_APP_API_URL || 'https://pupuseria-backend.onrender.com/api';\n// Helper para manejar respuestas\nconst handleResponse = async (response) => {\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.error || 'Error en la petición');\n  }\n\n  return data;\n};\n\n// Helper para manejar errores\nconst handleError = (error) => {\n  console.error('API Error:', error);\n  throw error;\n};\n\n// ============================================\n// PRODUCTOS\n// ============================================\nexport const productsAPI = {\n  // Obtener todos los productos\n  getAll: async () => {\n    try {\n      const response = await fetch(`${API_URL}/products`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n\n  // Obtener un producto por ID\n  getById: async (id) => {\n    try {\n      const response = await fetch(`${API_URL}/products/${id}`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n\n  // Crear producto\n  create: async (productData) => {\n    try {\n      const response = await fetch(`${API_URL}/products`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(productData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n\n  // Actualizar producto\n  update: async (id, productData) => {\n    try {\n      const response = await fetch(`${API_URL}/products/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(productData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n\n  // Eliminar producto\n  delete: async (id) => {\n    try {\n      const response = await fetch(`${API_URL}/products/${id}`, {\n        method: 'DELETE'\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  }\n};\n\n// ============================================\n// PEDIDOS\n// ============================================\nexport const ordersAPI = {\n  // Obtener pedidos por fecha\n  getByDate: async (date) => {\n    try {\n      const response = await fetch(`${API_URL}/orders?date=${date}`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n\n  // Obtener un pedido por ID\n  getById: async (id) => {\n    try {\n      const response = await fetch(`${API_URL}/orders/${id}`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n\n  // Crear pedido\n  create: async (orderData) => {\n    try {\n      const response = await fetch(`${API_URL}/orders`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(orderData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n\n  // Actualizar pedido\n  update: async (id, orderData) => {\n    try {\n      const response = await fetch(`${API_URL}/orders/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(orderData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n\n  // Eliminar pedido\n  delete: async (id) => {\n    try {\n      const response = await fetch(`${API_URL}/orders/${id}`, {\n        method: 'DELETE'\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  }\n};\n\n// ============================================\n// REPORTES\n// ============================================\nexport const reportsAPI = {\n  // Obtener reporte diario\n  getDaily: async (date) => {\n    try {\n      const response = await fetch(`${API_URL}/reports/daily/${date}`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n\n  // Exportar CSV\n  exportCSV: async (date) => {\n    try {\n      const response = await fetch(`${API_URL}/reports/daily/${date}/export`);\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Error al exportar CSV');\n      }\n\n      // Descargar archivo\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `ventas_${date}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      return { success: true };\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n\n  // Obtener resumen de período\n  getSummary: async (startDate, endDate) => {\n    try {\n      const params = new URLSearchParams();\n      if (startDate) params.append('start_date', startDate);\n      if (endDate) params.append('end_date', endDate);\n\n      const response = await fetch(`${API_URL}/reports/summary?${params}`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  }\n};\n\n// ============================================\n// DÍAS ABIERTOS\n// ============================================\nexport const openDaysAPI = {\n  // Obtener todos los días\n  getAll: async (startDate, endDate) => {\n    try {\n      const params = new URLSearchParams();\n      if (startDate) params.append('start_date', startDate);\n      if (endDate) params.append('end_date', endDate);\n\n      const url = `${API_URL}/open-days${params.toString() ? '?' + params : ''}`;\n      const response = await fetch(url);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n\n  // Obtener estado de un día\n  getByDate: async (date) => {\n    try {\n      const response = await fetch(`${API_URL}/open-days/${date}`);\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n\n  // Actualizar estado de un día\n  update: async (date, isOpen) => {\n    try {\n      const response = await fetch(`${API_URL}/open-days/${date}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ is_open: isOpen })\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  },\n\n  // Marcar múltiples días\n  updateMultiple: async (dates) => {\n    try {\n      const response = await fetch(`${API_URL}/open-days`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ dates })\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      return handleError(error);\n    }\n  }\n};\n\nexport default {\n  products: productsAPI,\n  orders: ordersAPI,\n  reports: reportsAPI,\n  openDays: openDaysAPI\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}